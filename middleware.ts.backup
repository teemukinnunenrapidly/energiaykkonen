import { NextResponse, type NextRequest } from 'next/server';

// Inline JWT verification for Edge Runtime compatibility
// Support both legacy and new JWT systems
async function verifyJWTSession(token: string): Promise<{ userId: string; role: string; expiresAt: string } | null> {
  try {
    // Split the JWT token
    const parts = token.split('.');
    if (parts.length !== 3) return null;

    // Decode the payload (second part)
    const payload = JSON.parse(atob(parts[1]));
    
    // Check if token is expired
    if (payload.exp && Date.now() >= payload.exp * 1000) {
      return null;
    }

    // Validate required fields
    if (!payload.userId || !payload.role || !payload.expiresAt) {
      return null;
    }

    // Check if token is expired using expiresAt field
    if (new Date() > new Date(payload.expiresAt)) {
      return null;
    }

    return {
      userId: payload.userId,
      role: payload.role,
      expiresAt: payload.expiresAt,
    };
  } catch {
    return null;
  }
}

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // Allow access to login page and API auth endpoint
  if (pathname === '/admin/login' || pathname === '/api/admin/auth') {
    return NextResponse.next();
  }

  // Check for session on protected admin routes
  if (pathname.startsWith('/admin') || pathname.startsWith('/api/admin')) {
    const sessionCookie = request.cookies.get('admin-session')?.value;
    
    if (!sessionCookie) {
      // Redirect to login if no session cookie
      const loginUrl = new URL('/admin/login', request.url);
      loginUrl.searchParams.set('redirect', pathname);
      return NextResponse.redirect(loginUrl);
    }

    const session = await verifyJWTSession(sessionCookie);
    
    if (!session) {
      // Redirect to login if invalid session
      const loginUrl = new URL('/admin/login', request.url);
      loginUrl.searchParams.set('redirect', pathname);
      return NextResponse.redirect(loginUrl);
    }

    if (session.role !== 'admin') {
      // Return 403 if user doesn't have admin role
      return new NextResponse('Forbidden', { status: 403 });
    }
  }

  return NextResponse.next();
}

// Configure which routes the middleware runs on
export const config = {
  matcher: ['/admin/:path*', '/api/admin/:path*'],
};

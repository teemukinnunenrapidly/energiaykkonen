# Task ID: 4
# Title: Implement Form Validation and Input Masking
# Status: done
# Dependencies: 3
# Priority: high
# Description: Add robust validation and input masking using React Hook Form and Zod, including Finnish phone format and required fields.
# Details:
- Define Zod schemas for each step.
- Validate email, phone (Finnish regex), required fields, and number ranges (e.g., 10-1000mÂ²).
- Add input masking for phone and currency fields.
- Show inline error messages and disable next button until valid.
- Ensure GDPR consent if required.

# Test Strategy:
Attempt invalid inputs for each field and verify correct error messages. Test edge cases (min/max values, invalid emails/phones). Confirm form cannot proceed with invalid data.

# Subtasks:
## 1. Define Zod Schemas for Form Steps [done]
### Dependencies: None
### Description: Create Zod schemas for each step of the form, specifying validation rules for email, Finnish phone format, required fields, and number ranges.
### Details:
Include custom error messages and use Zod's refine method for complex validations such as Finnish phone regex and number ranges.

## 2. Implement Validation Logic with React Hook Form [done]
### Dependencies: 4.1
### Description: Integrate the defined Zod schemas with React Hook Form using the zodResolver to enforce validation on form inputs.
### Details:
Configure React Hook Form to use the Zod schemas for validation, ensuring all required fields and formats are checked before submission.

## 3. Set Up Input Masking for Phone and Currency Fields [done]
### Dependencies: 4.2
### Description: Add input masking to the phone and currency fields to guide user input and enforce correct formatting.
### Details:
Use a masking library or custom logic to ensure Finnish phone numbers and currency values are entered in the correct format.

## 4. Handle Inline Error Messages and Button State [done]
### Dependencies: 4.2
### Description: Display inline error messages for invalid inputs and disable the next button until all fields are valid.
### Details:
Map Zod validation errors to user-friendly messages and update the UI to reflect validation state, including disabling navigation until valid.

## 5. Integrate GDPR Consent Validation [done]
### Dependencies: 4.1, 4.2
### Description: Ensure GDPR consent is required and validated as part of the form submission process.
### Details:
Add a checkbox for GDPR consent, validate its state using Zod, and prevent form submission if not accepted.


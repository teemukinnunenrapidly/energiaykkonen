# Task ID: 22
# Title: Implement Test Email Functionality in Admin Preview Page
# Status: pending
# Dependencies: 8, 12, 19
# Priority: medium
# Description: Add a test email feature to the admin preview page that allows administrators to verify email delivery functionality without affecting production data, including test mode submission and email delivery to admin's address.
# Details:
1. Extend the existing admin preview page (`/admin/preview/page.tsx`) to include a "Test Email" toggle in the header bar
2. Create a dedicated API endpoint (`/api/admin/test-email`) that handles test form submissions:
   - Accept the same payload as the regular form submission endpoint
   - Add a "TEST" flag to the submission data
   - Store the test submission in the database with a "TEST" marker
   - Set up an automatic cleanup job to delete test submissions after 24 hours
3. Modify the email delivery logic to:
   - Detect test submissions based on the "TEST" flag
   - Override the recipient email address with the admin's email (from their profile or session)
   - Add clear "TEST MODE" indicators in the email subject and body
   - Use the same email templates as production but with test indicators
4. Implement the UI components:
   - Add a toggle switch in the preview header labeled "Send Test Email"
   - Add a notification system to show success/failure of test email delivery
   - Display a banner in the preview mode indicating when test mode is active
5. Ensure all test submissions are clearly marked in the database:
   - Add a "test" boolean column to the leads table if not already present
   - Set up database triggers or scheduled functions to auto-delete test records after 24 hours
6. Add clear visual indicators throughout the preview experience:
   - "TEST MODE" watermark on the preview calculator
   - Red border or other visual indicator when test mode is active
   - Confirmation dialogs before test submission to prevent accidental sends

# Test Strategy:
1. Verify the "Test Email" toggle appears correctly in the preview page header
2. Test the complete flow:
   - Enable the test email toggle
   - Fill out the calculator form completely
   - Submit the form and verify a success message appears
   - Check the admin's email inbox for the test email
   - Verify the email contains clear "TEST MODE" indicators
   - Confirm the test submission appears in the database with the "TEST" flag
3. Verify test data cleanup:
   - Create a test submission
   - Wait 24 hours (or manually trigger the cleanup job for testing)
   - Confirm the test submission has been removed from the database
4. Test edge cases:
   - Submit with the toggle off and verify no test email is sent
   - Submit with invalid form data and verify appropriate error handling
   - Test with missing admin email configuration and verify fallback behavior
5. Verify security:
   - Confirm only authenticated administrators can access the test email functionality
   - Verify test submissions cannot be viewed by non-admin users
   - Ensure test emails are only sent to the admin's verified email address

# Subtasks:
## 1. Add Test Email Toggle and Visual Indicators to Admin Preview Page [pending]
### Dependencies: None
### Description: Extend the admin preview page to include a 'Test Email' toggle in the header bar, and implement clear visual indicators (banner, watermark, red border) to show when test mode is active.
### Details:
Update `/admin/preview/page.tsx` to add a toggle switch labeled 'Send Test Email' in the header. Display a banner and a 'TEST MODE' watermark on the calculator, and apply a red border or similar indicator when test mode is enabled. Ensure a confirmation dialog appears before test submission to prevent accidental sends.

## 2. Implement Dedicated Test Email API Endpoint [pending]
### Dependencies: 22.1
### Description: Create a new API endpoint `/api/admin/test-email` to handle test form submissions, accepting the same payload as the production endpoint but marking submissions as test.
### Details:
Develop the endpoint to accept form data, add a 'TEST' flag to the payload, store the submission in the database with a 'test' marker, and trigger email delivery logic for test mode.

## 3. Modify Email Delivery Logic for Test Mode [pending]
### Dependencies: 22.2
### Description: Update email delivery logic to detect test submissions, override recipient with admin's email, and add 'TEST MODE' indicators to the email subject and body.
### Details:
Ensure that when the 'TEST' flag is present, the recipient is set to the admin's email (from profile/session), and the email uses the same templates as production but with clear 'TEST MODE' indicators in both subject and body.

## 4. Implement Test Submission Database Handling and Cleanup [pending]
### Dependencies: 22.2
### Description: Ensure test submissions are clearly marked in the database and set up an automatic cleanup job to delete them after 24 hours.
### Details:
Add a 'test' boolean column to the leads table if not present. Implement database triggers or scheduled functions to automatically delete test records after 24 hours.

## 5. Add UI Feedback for Test Email Actions [pending]
### Dependencies: 22.1, 22.3
### Description: Implement notification and feedback components to inform the admin of test email delivery success or failure, and display active test mode status.
### Details:
Add a notification system to show the result of test email delivery attempts and display a persistent banner or indicator when test mode is active.


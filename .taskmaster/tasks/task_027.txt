# Task ID: 27
# Title: Integrate Cloudflare Images API for Visual Asset Management
# Status: pending
# Dependencies: 7, 9, 25
# Priority: high
# Description: Set up Cloudflare Images integration to handle image upload, automatic compression, resizing, and CDN delivery for the admin panel's visual asset management system, replacing local image storage with Cloudflare's optimized image delivery service.
# Details:
1. Set up Cloudflare Images account and obtain API credentials:
   - Create a Cloudflare account or use existing one
   - Enable Cloudflare Images service
   - Generate API tokens with appropriate permissions
   - Store credentials securely in environment variables

2. Create image upload endpoint `/api/admin/upload-image`:
   - Implement a Next.js API route that accepts multipart/form-data
   - Add middleware to verify admin authentication
   - Extract image file from request
   - Forward image to Cloudflare Images API using their SDK or REST API
   - Return JSON response with Cloudflare image ID and delivery URLs

3. Implement automatic variant generation:
   - Configure Cloudflare to generate the following variants:
     * Thumbnail (150x150, cropped)
     * Mobile (768px width, proportional height)
     * Desktop (1920px width, proportional height)
     * Original (preserved as uploaded)
   - Create TypeScript interfaces for image variants
   - Implement helper functions to generate variant URLs based on Cloudflare's URL pattern

4. Update Supabase database schema:
   - Create or modify `images` table with columns for:
     * `id` (primary key)
     * `cloudflare_id` (string, Cloudflare's image identifier)
     * `filename` (original filename)
     * `uploaded_by` (admin user ID)
     * `created_at` (timestamp)
     * `alt_text` (optional description)
     * `tags` (optional array for categorization)
   - Do not store actual image binary data in Supabase

5. Create utility functions in `/lib/cloudflare-images.ts`:
   - `uploadImage(file: File): Promise<CloudflareImageResponse>`
   - `getVariantUrl(imageId: string, variant: 'thumbnail' | 'mobile' | 'desktop' | 'original'): string`
   - `deleteImage(imageId: string): Promise<boolean>`
   - `listImages(page?: number, limit?: number): Promise<CloudflareImageList>`

6. Update existing image references:
   - Identify all components using local images
   - Refactor to use Cloudflare URLs with appropriate variants
   - Update any image-related types or interfaces

7. Add image management UI in admin panel:
   - Create `/admin/images/page.tsx` with:
     * Upload button supporting drag-and-drop
     * Image gallery grid showing all uploaded assets
     * Pagination for large collections
     * Delete functionality with confirmation
     * Copy URL buttons for each variant
     * Basic filtering by filename or tags
   - Implement responsive design for the image management UI
   - Add loading states and error handling

8. Implement client-side image upload component:
   - Create reusable `ImageUploader` component
   - Add progress indicator during upload
   - Show preview of uploaded image
   - Handle upload errors gracefully
   - Support multiple image uploads
<info added on 2025-08-25T13:38:02.161Z>
9. Implement Next.js custom image loader for Cloudflare:
   - Create `/lib/cloudflare-image-loader.ts` with:
     * Custom loader function that generates Cloudflare variant URLs
     * Support for width, quality, and format parameters
     * Proper URL construction using Cloudflare account hash
   - Configure in `next.config.js`:
     * Set `images.loader` to 'custom'
     * Set `images.loaderFile` to './lib/cloudflare-image-loader.js'
     * Add 'imagedelivery.net' to `images.domains`

10. Implement error handling and retry logic:
    - Add exponential backoff for failed uploads
    - Implement client-side retry mechanism for network failures
    - Create error boundary components for image display failures
    - Log detailed error information for debugging

11. Optimize image delivery performance:
    - Configure appropriate Cache-Control headers
    - Implement lazy loading for image galleries
    - Use responsive image techniques with srcset attributes
    - Monitor and analyze image loading performance metrics

12. Document Cloudflare Images integration:
    - Create developer documentation for the image system
    - Document variant naming conventions and use cases
    - Provide examples of proper image component usage
    - Include troubleshooting guide for common issues
</info added on 2025-08-25T13:38:02.161Z>

# Test Strategy:
1. Unit Testing:
   - Test utility functions in isolation with mock Cloudflare API responses
   - Verify URL generation for different variants
   - Test error handling for failed uploads or deletions

2. Integration Testing:
   - Test the complete upload flow from admin UI to Cloudflare and back
   - Verify image IDs are correctly stored in Supabase
   - Test deletion removes images from both Cloudflare and database
   - Confirm all variants are generated correctly

3. Performance Testing:
   - Upload various image formats (JPG, PNG, WebP, GIF) and verify compression
   - Test with different image sizes to ensure proper handling of large files
   - Measure CDN delivery speed from different geographic locations
   - Compare load times before and after Cloudflare implementation

4. UI Testing:
   - Verify the image management UI renders correctly across devices
   - Test drag-and-drop functionality in different browsers
   - Confirm copy URL buttons work as expected
   - Test pagination and filtering of the image gallery

5. Security Testing:
   - Verify only authenticated admins can upload/delete images
   - Test for common vulnerabilities (XSS, CSRF) in the upload endpoint
   - Ensure API keys are properly secured and not exposed to clients

6. End-to-End Testing:
   - Upload an image through the admin panel
   - Use the image in the calculator UI
   - Verify the image loads correctly in the calculator preview
   - Delete the image and confirm it's removed from all locations

# Subtasks:
## 1. Cloudflare Images Account Setup and API Credential Management [pending]
### Dependencies: None
### Description: Establish a Cloudflare account, enable the Images service, generate API tokens with least-privilege access for image operations, and securely store credentials in environment variables for backend use.
### Details:
Log in to the Cloudflare dashboard, activate the Images product, and create a custom API token with permissions limited to image upload, read, and delete. Document the process for future maintenance and ensure credentials are injected into the deployment environment securely.

## 2. Implement Image Upload API Endpoint and Integration [pending]
### Dependencies: 27.1
### Description: Develop a secure Next.js API route for image uploads, handling multipart/form-data, authenticating admin users, and forwarding images to Cloudflare Images via REST API or SDK.
### Details:
Create `/api/admin/upload-image` with middleware for admin authentication. Parse incoming requests, extract image files, and forward them to Cloudflare Images using the stored API token. Return structured JSON responses with Cloudflare image IDs and delivery URLs.
<info added on 2025-08-25T13:39:54.117Z>
This subtask depends on subtask 27.1 (Cloudflare account setup) being completed first. Implementation requires the API credentials and account configuration established in 27.1 to properly authenticate requests to the Cloudflare Images service.
</info added on 2025-08-25T13:39:54.117Z>

## 3. Configure Image Variants and Next.js Custom Loader [pending]
### Dependencies: 27.2
### Description: Define and register image variants (thumbnail, mobile, desktop, original) in Cloudflare, and implement a custom Next.js image loader to generate variant URLs and optimize delivery.
### Details:
In the Cloudflare dashboard, create named variants with required dimensions and settings. Develop `/lib/cloudflare-image-loader.ts` to construct variant URLs based on Cloudflare's URL schema, supporting width, quality, and format parameters. Update `next.config.js` to use the custom loader and allow Cloudflare's image domain.
<info added on 2025-08-25T13:40:02.519Z>
This subtask requires completion of subtask 27.2 (Implement Image Upload API Endpoint and Integration) before it can be started, as the custom loader implementation depends on having the API endpoints properly configured and functional.
</info added on 2025-08-25T13:40:02.519Z>

## 4. Update Admin Panel UI and Database Schema for Cloudflare Integration [pending]
### Dependencies: 27.3
### Description: Refactor the admin panel's image management UI to use Cloudflare-hosted images and variants, and update the Supabase schema to store Cloudflare image metadata without local binaries.
### Details:
Modify the `/admin/images/page.tsx` to display images using Cloudflare URLs, support variant selection, and provide upload, delete, and copy URL features. Update the Supabase `images` table to store Cloudflare IDs, filenames, uploader info, and metadata. Remove any logic or storage related to local image binaries.
<info added on 2025-08-25T13:40:09.604Z>
This subtask depends on subtask 27.3 (Configure Image Variants and Next.js Custom Loader) being completed first. Implementation should only begin after the variant configuration and custom loader functionality are in place.
</info added on 2025-08-25T13:40:09.604Z>

## 5. Comprehensive Testing and Performance Optimization [pending]
### Dependencies: 27.4
### Description: Implement unit, integration, and UI tests for all image management flows, add error handling and retry logic, and optimize image delivery with caching, lazy loading, and responsive techniques.
### Details:
Write tests for utility functions, API endpoints, and UI components. Add exponential backoff for failed uploads, error boundaries for image display, and detailed logging. Configure Cache-Control headers, enable lazy loading, and use srcset for responsive images. Monitor and analyze image loading performance.
<info added on 2025-08-25T13:40:15.763Z>
This subtask is dependent on subtask 27.4 (Update Admin Panel UI and Database Schema for Cloudflare Integration) and requires it to be completed first before implementation can begin. The testing and performance optimization work relies on the UI components and database structures that will be established in subtask 27.4.
</info added on 2025-08-25T13:40:15.763Z>

